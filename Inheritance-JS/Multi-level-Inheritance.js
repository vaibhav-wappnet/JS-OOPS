// this example includes the use of the multilevel inheritance and method overriding

// class Person is created
class Person {
    constructor(name) {
        this.name = name;
    }


    //method tha defines and assigns values of email field
    setEmail(email) { this.email = email }

    // this method returns random numbers upto 10000 whose value is given to the getOTP method
    setOTP() { return Math.floor(Math.random() * 10000) }

    // this method takes the value from the getOTP method and return it
    getOTP() { return `your otp is : "${this.setOTP()}"`; }

    // this method returns the name the type of Person and which email is use to log in.
    greet() {
        return `Welcome ${this.name}! you are logged In as an "${this.type}" with email : "${this.email}"`;
    }
}

// Admin class which extends Person class Admin class is child class of the Person class
class Admin extends Person {
    constructor(name, otp, id, email, type) {
        super(name, otp, id, email, type);
    }

    // getType method defines Type of the Admin (In case of admin it will give according Value)
    getType(type) { return `${this.type = type}` }

    // setId method defines and assigns the value of the Id field of the Admin
    setId(id) { return this.id = id; }

    // getEmail takes the value of the setMail function method
    getEmail() { return this.setEmail(); }

    // returns the value generated by setOTP method
    getOTP() { return `your otp is : "${this.otp = this.setOTP()}"` }

    // returns the getOTP , greet method and the value of ID
    getDetails() { return `${this.getOTP()}\n${this.greet()}\nYour Login ID for this Session is "${this.id}"`; }
}

//  User class extends the Admin class os that it can access all the properties of the parent class
class User extends Admin {
    // constructor is created
    constructor(name, otp, email, id) {
        super(name, otp, email, id);
    }

    // inherits the the value of setEmail method
    getEmail() {
        return this.setEmail();
    }

    // inherits the value of setId method
    setId(id) {
        return `${this.id = id}`;
    }

    // returns the getOTP, greet method and the value of Id
    getDetails() {
        return `${this.getOTP()}\n${this.greet()}\nYour Login ID for this Session is "${this.id}"`
    }
}

// creates an instance named admin1 of Admin class and the relative methods all called
let admin1 = new Admin("Vaibhav");
admin1.setId(1);
admin1.getType("Admin");
admin1.setEmail("vaibhav@admin.ok");

// calls the getDetails method for the admin1 instance
console.log(admin1.getDetails());
console.log("-----------------------------------------------------------------------------------------");

// creates an instance named admin2 of Admin class and the relative methods all called
let admin2 = new Admin("Omen");
admin2.setId(2);
admin2.getType("Admin");
admin2.setEmail("omen@admin.ok");

// calls the getDetails method for the admin2 instance
console.log(admin2.getDetails());
console.log("-----------------------------------------------------------------------------------------");

// creates an instance named user1 of Admin class and the relative methods all called
let user1 = new User("Reyna");
user1.setId(1);
user1.getType("User");
user1.setEmail("reyna@user.ok")

// calls the getDetails method for the user1 instance
console.log(user1.getDetails());
console.log("-----------------------------------------------------------------------------------------");

// creates an instance named user2 of Admin class and the relative methods all called
let user2 = new User("Kendall");
user2.setId(2);
user2.getType("User");
user2.setEmail("kendall@user.ok")

// calls the getDetails method for the user2 instance
console.log(user2.getDetails());
console.log("-----------------------------------------------------------------------------------------");